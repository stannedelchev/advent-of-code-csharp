using Microsoft.VisualStudio.TestTools.UnitTesting;
using AdventOfCode2017.Day1;

namespace AdventOfCode2017.Tests
{
    [TestClass]
    [TestCategory("Day1")]
    public class Day1SolverTests
    {
        private Solver solver;

        [TestMethod]
        public void ExampleTests_Part1_1122_Pass()
        {
            //1122 produces a sum of 3 (1 + 2) because the first digit (1) matches the second digit and the third digit (2) matches the fourth digit.

            var actual = this.solver.SolvePart1("1122");
            Assert.AreEqual(3, actual);
        }

        [TestMethod]
        public void ExampleTests_Part1_1111_Pass()
        {
            //1111 produces 4 because each digit (all 1) matches the next.

            var actual = this.solver.SolvePart1("1111");
            Assert.AreEqual(4, actual);
        }

        [TestMethod]
        public void ExampleTests_Part1_1234_Pass()
        {
            //1234 produces 0 because no digit matches the next.

            var actual = this.solver.SolvePart1("1234");
            Assert.AreEqual(0, actual);
        }

        [TestMethod]
        public void ExampleTests_Part1_91212129_Pass()
        {
            //91212129 produces 9 because the only digit that matches the next one is the last digit, 9.

            var actual = this.solver.SolvePart1("91212129");
            Assert.AreEqual(9, actual);
        }

        [TestMethod]
        public void SolutionAnswer_Part1_Passes()
        {
            var actual = this.solver.SolvePart
            Assert.AreEqual(1177, actual);
        }

        [TestMethod]
        public void ExampleTests_Part2_1212_Pass()
        {
            //1212 produces 6: the list contains 4 items, and all four digits match the digit 2 items ahead.

            var actual = this.solver.SolvePart2("1212");
            Assert.AreEqual(6, actual);
        }

        [TestMethod]
        public void ExampleTests_Part2_1221_Pass()
        {
            //1221 produces 0, because every comparison is between a 1 and a 2.

            var actual = this.solver.SolvePart2("1221");
            Assert.AreEqual(0, actual);
        }

        [TestMethod]
        public void ExampleTests_Part2_123425_Pass()
        {
            //123425 produces 4, because both 2s match each other, but no other digit has a match.

            var actual = this.solver.SolvePart2("123425");
            Assert.AreEqual(4, actual);
        }

        [TestMethod]
        public void ExampleTests_Part2_123123_Pass()
        {
            //123123 produces 12.

            var actual = this.solver.SolvePart2("123123");
            Assert.AreEqual(12, actual);
        }

        [TestMethod]
        public void ExampleTests_Part2_12131415_Pass()
        {
            //12131415 produces 4.

            var actual = this.solver.SolvePart2("12131415");
            Assert.AreEqual(4, actual);
        }

        [TestMethod]
        public void SolutionAnswer_Part2_Passes()
        {
            Assert.AreEqual(1060, this.solver.SolvePart2("3893445835429722678558456317563893861752455542588369533636585887178232467588827193173595918648538852463974393264428538856739259399322741844613957229674619566966921656443476317729968764183945899765294481327998956154956571467872487576314549468261122281384513266834769436913544431258253346374641589492728885222652146158261225296144835682556133922436438188211288458692217737145834468534829945993366314375465767468939773939978272968388546791547526366348163672162245585168892858977723516752284597322176349412485116173844733679871253985762643852151748396593275274582481295864991886985988427966155944392352248314629138972358467959614279553511247863869663526823326467571462371663396188951696286916979923587358992127741723727623235238531991996999181976664226274715591531566495345212849683589582225465555847312199122268773923175183128124556249916458878785361322713513153175157855597289482439449732469754748544437553251412476225415932478849961897299721228198262823515159848941742786272262236888514421279147329383465929358896761449135917829473321834267122759371247338155787774952626616791265889922959653887288735233291968146648533754958199821789499914763279869931218136266492627818972334549751282191883558361871277375851259751294611921756927694394977764633932938573132221389861617195291742156362494769521829599476753198422283287735888197584327719697758442462886311961723849326959213928195182293316227334998926839139915138472514686689887874559367524254175582135318545912361877139367538434683933333264146289842238921989275112323681356256979576948644489986951538689949884787173194457523474156229389465725473817651516136514446513436419126533875125645855223921197481833434658264655912731133356464193251635637423222227273192628825165993827511625956856754776849919858414375874943572889154281862749595896438581889424559988914658387293414662361364793844213298677236787998677166743945812899526292132465751582925131262933636228593134861363493849168168765261647652342891576445292462341171477487223253795935253493869317616741963486473"));
        }

        [TestInitialize]
        public void Initialize()
        {
            this.solver = new Solver();
        }
    }
}
